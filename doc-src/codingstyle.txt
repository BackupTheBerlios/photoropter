/**

@page codingstyle Photoropter coding style

Photoropter is written in C++, a language that provides the developer with
a great deal of flexibility. However, quite a lot of things that are possible
with C++ are not necessarily sensible as well. This document outlines the
coding style used in the development of the Photoropter library; mainly to
make life easier for potential contributers, but if you want to adopt these
guidelines for your own project, feel free to do so.

@section code_org Code organisation

@subsection code_org_classes Classes and structs

<ul>
<li>The interface of polymorphic classes is extracted in form of a
(fully abstract) interface class, from which all the implementing classes
inherit.</li>
<li>Semantically different parts of a class's interface are
extracted into separate interface definitions.</li>
<li>Interface definitions aim to be minimal: if e.g. a class offers functions
both for reading from and writing to a file, this usually means it implements
two distinct interfaces (one for reading, one for writing).</li>
<li>Usually a header contains only a single class
definition. Exception: closely related interface definitons that form
a coherent unit.</li>
</ul>

@subsection code_org_misc Miscellaneous

<ul>
<li>Variables are declared one by one, each in a separate declaration
statement.</li>
<li>Every variable is initialised upon declaration.</li>
<li>Functions that receive objects as parameters use references or pointers
to the interface base class wherever possible. This improves both flexibility
and readability of the code.</li>
<li>Enumerations are usually placed inside their own descriptive struct and
given a generic name like e.g. 'type'. This places the enum's values in their own
namespace and thus allows to refer to both the enumeration as a whole as well
as its values by using the descriptive struct name. This avoids namespace
pollution. </li>
<li>Every 'switch' statement contains a 'default:' label.</li>
<li>All public class interface elements and functions (especially those
that are expected to be used "from the outside") are documented using
Doxygen comments. Private class members are generally also documented if
possible.</li>
</ul>

@section formatting Formatting

<ul>
<li>The source code is formatted according to the ANSI style.</li>
<li>Scoping braces ('curly braces') are usually placed on separate lines.</li>
<li>Single-line blocks (e.g., in loops or if-clauses) are always marked with
scoping braces. This avoids errors when expanding such a block.</li>
<li>Blocks are indented by 4 spaces. However, the corresponding scope braces
are not indented.</li>
<li>A sample configuration file for the astyle code formatter is provided.</li>
</ul>

@section naming Naming

@subsection naming_general General

<ul>
<li>All identifiers are plain English.</li>
<li>Identifiers are descriptive. Especially very short names
like i,k,l or x,y,z are used only for very shortlived variables (e.g.,
loop counters), and only if there cannot be any doubt about their
purpose.</li>
<li>Variables and typedefs are written in small letters, only using
[a-z0-9] as characters.</li>
<li>Variables and typedefs that contain more than one word are separated
using "_".</li>
<li>Typedefs are marked with a "_t" suffix.</li>
<li>Private variables in classes are marked with a single "_" suffix.</li>
</ul>

@subsection naming_classes Classes and structs

<ul>
<li>The general naming principles apply, with the following exceptions.</li>
<li>The first letter of a class name is capitalised. The following
letters remain lower-case.</li>
<li>Multiple words in a class name are separated by capitalisation
rather than "_" (i.e., 'camel casing' is used).</li>
<li>Interface definitions (i.e., fully abstract class definitions) are
marked by an initial letter "I". This is not considered the first
letter of the class name (i.e., the second point still applies).</li>
<li>A class name always differs from the interface it implements by more
than the "I" prefix. E.g., a class implementing "IImageView" cannot use
the name "ImageView".</li>
</ul>

@subsection naming_macros Macros

<ul>
<li>The general naming rules apply, with the following differences.</li>
<li>Macro names are completely capitalised.</li>
<li>All macro names use a descriptive prefix (e.g., "PHTR_") to avoid
name collisions.</li>
</ul>

@subsection naming_files Files

<ul>
<li>Filenames are descriptive. If no descriptive name can easily be found,
this is a sign that too many different things are included in that file.</li>
<li>A file that contains the declaration or implementation of a class
is named like that class, with the following differences:<ol>
 <li>No capitalisation.</li>
 <li>Multiple words are separated by "_" rather than capital letters.</li>
 <li>The "I" prefix of interface classes is omitted.</li></ol>E.g.,
 the file containing the declaration of "IImageView" will be called
 'image_view.h'.</li>
<li>Plain C files use the suffix ".c".</li>
<li>C++ files use the suffix ".cpp".</li>
<li>Header files (C and C++) use the suffix ".h".</li>
<li>Inline definitons use the double suffix ".inl.h".</li>
<li>Template definitions use the double suffix ".tpl.h".</li>
</ul>

@section langfeatures Language features

@subsection langfeatures_general General
<ul>
<li>The 'const' keyword is used proactively.</li>
<li>Namespaces are used wherever sensible. Semantically independent
parts of the code reside in separate namespaces.</li>
<li>The 'using' keyword is generally avoided, especially in the form
'using namespace [...]' at global scope.</li>
<li>Multiple inheritance is generally avoided. Exception: inheritance
of interface class definitions.</li>
<li>Visibility specifiers in classes and structs (e.g., 'public', 'private')
are repeated in front of every member declaration. Exception: public
members of structs are generally not specially marked (and non-public
members are usually shifted towards the end of the struct, if used at all).</li>
</ul>

@subsection langfeatures_classes Classes and structs

<ul>
<li>All classes usually declare a virtual destructor. Exception: most class template
structures that use static polymorphism, traits or similar techniques, since these
(technically) do not use inheritance anyway.</li>
<li>If there is a good reason to declare the destructor of a regular class non-virtual,
it is marked (and explained) in the documentation.</li>
<li>A class without virtual destructor is never used as base class.</li>
<li>Structs are not considered classes (even if C++ does treat them that way).
The 'struct' keyword is only used for types that are semantically "not a class"
(see next point). Classes use the 'class' keyword exclusively.</li>
<li>A struct is only used for:<ul>
 <li>interoperability with C, or</li>
 <li>to hold constant, static and/or type information.</li></ul></li>
<li>Structs have no 'surprising' side effects (like initialisation of buffers).</li>
<li>A struct is never used as base class.</li>
<li>Apart from constructors for member initialisation and 'const' functions
without side effects, a struct does not contain member functions.</li>
<li>Structs do not contain virtual members.</li>
</ul>

@subsection langfeatures_templates Templates

<ul>
<li>Only inline templates are used.</li>
<li>If the implementation of a template is contained in a separate file,
that file will be included in the declaration header (so-called
'inclusion model').</li>
<li>The "export" keyword is not used, since it is only supported by two
(semi-)popular compilers at the moment (Comeau and Intel, which also uses
the Comeau frontend).</li>
</ul>

@subsection langfeatures_macros Macros

<ul>
<li>Macros are generally avoided where possible.</li>
<li>If a macro must be used, it is as short as possible and avoids
'unexpected' side effects.</li>
<li>Macros are never used to change identifiers (e.g., variable or type names).</li>
<li>Macros are never used to replace keywords.</li>
<lI>Macros are not used for metaprogramming (i.e., to generate classes etc.); metaprogramming is
usually achieved by using templates.</li>
</ul>

@subsection langfeatures_memory Memory Management

<ul>
<li>Resource aquisition is initialisation (RAII). All resources aquired in the constructor
are freed in the destructor.</li>
<li>Naked pointers are generally avoided; references are used wherever possible.</li>
<li>Pointers returned e.g. by factory functions are wrapped in smart pointers if possible.</li>
</ul>

*/

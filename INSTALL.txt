Installation instructions
=========================

Unix (GNU GCC 4.4):

-Extract the archive to a location of your choice.
-Create a build directory alongside it.
-If you want to build the example application, you need to have both VXL and
Boost installed and compiled.
-In the build directory, type:
cmake -D VXL_DIR:string=<vxl-dir> <phtr-srcdir>
-You can omit the VXL_DIR variable if you do not want to build the example
application.
-In the rare case that Boost is installed but cannot be found, try defining a
variable BOOST_ROOT pointing to its location.

Windows (Microsoft Visual Studio 2008+):

-Extract the archive to a location of your choice.
-Create a build directory alongside it.
-Start the CMake GUI and choose both source and build directory locations.
-If you want to build the example application, you need to have both VXL and
Boost installed and compiled.
-Click on "Add Entry" and define a string "VXL_DIR" pointing to the VXL build
directory.
-You can omit the VXL_DIR variable if you do not want to build the example
application.
-If you want to build the example application and should Boost be installed but
not be found, add an entry "BOOST_ROOT" pointing to the boost base directory.
-Copy a compatible version of 'stdint.h' either into the Photoropter include
directory (alongside the 'photoropter' subdirectory) or anywhere into the
include search path. There is a Google code project for this purpose at
http://code.google.com/p/msinttypes/

Notes
=====

-The CMake gui is also available for Unix. However, I wanted to describe the
command line usage of CMake as well.
-There are several CMake variables that control the behaviour of the Photoropter
build. These are:
PHTR_BUILD_DOCUMENTATION (bool): include Doxygen documentation in default build.
Otherwise a build target 'doc' is created but not executed by default. You need
doxygen for this to work.
PHTR_DOCUMENT_ALL (bool): document internals of Photoropter (including doxygen
comments that might be inside .cpp files)
PHTR_DOCUMENT_PRVATE (bool): include private members in the documentation;
requires the previous option
PHTR_PARALLELISE (bool): use OpenMP in the transformation loop if found
PHTR_SHARED (bool): build the shared library
